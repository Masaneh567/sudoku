def is_sudoku_solved(sudoku):
    
    solved = True  # Assume the Sudoku is solved until proven otherwise
    
    for row in sudoku:
        
        for col in row:

            if is_list(col) or col == 0:
                solved = False

    return solved
                

def find_empty_location(puzzle):
    for i in range(9):
        for j in range(9):
            if puzzle[i][j] == 0 or is_list(puzzle[i][j]):
                return i, j
    return None

def is_valid_guess(puzzle, row, col, num):
    for i in range(9):
        if puzzle[row][i] == num or puzzle[i][col] == num or puzzle[(row // 3) * 3 + i // 3][(col // 3) * 3 + i % 3] == num:
            return False
    return True

def backtracker(sudoku):
    if is_sudoku_solved(sudoku):
        return sudoku

    empty_location = find_empty_location(sudoku)
    print(empty_location)
    if empty_location:
        row, col = empty_location

        for num in sudoku[row][col]:
            print(num)
            if is_valid_guess(sudoku, row, col, num):
                sudoku_copy = copy.deepcopy(sudoku)
                sudoku_copy[row][col] = num
                
                result = backtracker(sudoku_copy)  
                if is_sudoku_solved(result):
                    for i in range(9):
                        for j in range(9):
                            sudoku[i][j] = sudoku_copy[i][j]
    
                    return sudoku

    return sudoku
