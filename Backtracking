#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Nov 17 16:11:14 2023

@author: miaglynn
"""

puzzle = [[4, 0, 0, 0, 0, 0, 9, 3, 8],
          [0, 3, 2, 0, 9, 4, 1, 0, 0],
          [0, 9, 5, 3, 0, 0, 2, 4, 0],
          [3, 7, 0, 6, 0, 9, 0, 0, 4],
          [5, 2, 9, 0, 0, 1, 6, 7, 3],
          [6, 0, 4, 7, 0, 3, 0, 9, 0],
          [9, 5, 7, 0, 0, 8, 3, 0, 0],
          [0, 0, 3, 9, 0, 0, 4, 0, 0],
          [2, 4, 0, 0, 3, 0, 7, 0, 9]]

import copy

# For variable names: row = row, cols = column, cols2 or row2 is just a second index to go through them,
# rrow and rcols are just the reset to the top left version for searching by grid

# Function to replace zeros (numbers to be solved) with a list 1-9 for what numbers it could be
def convert_to_listed(puzzle):
    for row in puzzle:
        for cols in range(9):
            if row[cols] == 0:
                row[cols] = list(range(1,10))
    return puzzle

def is_list(x):
    if type(x) is list:
        return True
    else:
        return False
    
# convert one letter lists to just integers
def list_to_int(sudoku):
    for row in sudoku:
        for cols in range(9):
            if is_list(row[cols]) and len(row[cols]) == 1:
                row[cols] = row[cols][0]
    return sudoku

# remove by row function
# rowcols is to look for list of potentials, rowcols2 is the numbers already given/solved in the sudoku to remove from
# list of potentials
def row_remover(sudoku):
    for row in sudoku:
        for cols in range(9):
            if is_list(row[cols]):
                for cols2 in range(9):
                    if not is_list(row[cols2]) and row[cols2] in row[cols]:
                        row[cols].remove(row[cols2])
    return list_to_int(sudoku)

# remove by column function
# rowcols is to look for list of potentials, row2cols is the numbers already given/solved in the sudoku to remove from
# list of potentials
def column_remover(sudoku):
    for row in sudoku:
        for cols in range(9):
            if is_list(row[cols]):
                for row2 in range(9):
                    if not is_list(sudoku[row2][cols]) and sudoku[row2][cols] in row[cols]:
                        row[cols].remove(sudoku[row2][cols])
    return list_to_int(sudoku)

# remove by grid function
# rowcols is to look for list of potentials, n is the column index and m is the box index to check each square for
# numbers already given/solved to remove from list of potentials
def grid_remover(sudoku):
    for row in range(9):
        for cols in range(9):
            if is_list(sudoku[row][cols]):
                rcols = (cols // 3) * 3
                rrow = (row // 3) * 3
                for n in range(rcols, rcols+3):
                    for m in range(rrow, rrow+3):
                        if not is_list(sudoku[m][n]) and sudoku[m][n] in sudoku[row][cols]:
                            sudoku[row][cols].remove(sudoku[m][n])
    return list_to_int(sudoku)


# performs simple elimination until it cannot make further changes

def simple_elimination(sudoku):
    
    sudoku_copied = copy.deepcopy(sudoku)
    
    convert_to_listed(sudoku_copied)
    
    same = False
    
    while same == False:
        
        sudoku_original = copy.deepcopy(sudoku_copied)
    
        row_remover(sudoku_copied)
        column_remover(sudoku_copied)
        grid_remover(sudoku_copied)
        list_to_int(sudoku_copied)
        
        if sudoku_original == sudoku_copied:
            same = True
            
    return list_to_int(sudoku_copied)


def is_sudoku_solved(sudoku):
    
    solved = True  # Assume the Sudoku is solved until proven otherwise
    
    for row in sudoku:
        
        for col in row:

            if is_list(col) or col == 0:
                solved = False

    return solved
                

def find_empty_location(sudoku):
    for i in range(9):
        for j in range(9):
            if sudoku[i][j] == 0 or is_list(sudoku[i][j]):
                return i, j
    return None

def is_valid_guess(sudoku, row, col, num):
    for i in range(9):
        if sudoku[row][i] == num or sudoku[i][col] == num or sudoku[(row // 3) * 3 + i // 3][(col // 3) * 3 + i % 3] == num:
            return False
    return True

def backtracker(sudoku):
    if is_sudoku_solved(sudoku):
        return sudoku

    empty_location = find_empty_location(sudoku)
    
    if empty_location:
        row, col = empty_location

        for num in sudoku[row][col]:
           
            if is_valid_guess(sudoku, row, col, num):
                sudoku_copy = copy.deepcopy(sudoku)
                sudoku_copy[row][col] = num
                
                result = backtracker(sudoku_copy)  
                if is_sudoku_solved(result):
                    for i in range(9):
                        for j in range(9):
                            sudoku[i][j] = sudoku_copy[i][j]
    
                    return sudoku

    return sudoku

            
test = simple_elimination(puzzle)  
backtracker(copy.deepcopy(test))
