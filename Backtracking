def is_sudoku_solved(sudoku):
    
    solved = True  # Assume the Sudoku is solved until proven otherwise
    
    for row in sudoku:
        
        for col in row:

            if not (type(col) == int and 1 <= col <= 9):
                solved = False

    return solved        
                

def is_valid_move(sudoku, row, col, num):
    # Check if 'num' is already in the same row or column
    for i in range(9):
        if sudoku[row][i] == num or sudoku[i][col] == num:
            return False

    # Check if 'num' is in the 3x3 box
    box_start_row, box_start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(box_start_row, box_start_row + 3):
        for j in range(box_start_col, box_start_col + 3):
            if sudoku[i][j] == num:
                return False

def backtracker(sudoku):
    if is_sudoku_solved(sudoku):
        return sudoku  # Base case: Sudoku is already solved

    for row in range(9):
        for col in range(9):
            if is_list(sudoku[row][col]):
                for value in sudoku[row][col]:
                    if is_valid_move(sudoku, row, col, value):
                        sudoku_copy = [row[:] for row in sudoku]
                        sudoku[row][col] = value  # Place the number

                        result = backtracker(sudoku_copy)  # Recursive call: Try to solve the Sudoku with the current digit
                        if is_sudoku_solved(result):
                            return result  # If successful, return the solved Sudoku

                # If no valid move is found, backtrack
                sudoku[row][col] = sudoku[row][col][:]

    return sudoku
